# Generated by Django 4.1.1 on 2022-09-16 14:25

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('label', models.CharField(max_length=100, verbose_name='Label')),
                ('name', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Name')),
                ('genre', models.CharField(choices=[('text_input', 'Text input'), ('text_area', 'Text area'), ('number', 'Number'), ('dropdown', 'Dropdown'), ('date', 'Date'), ('time', 'Time'), ('datetime', 'Datetime'), ('email', 'E-Mail'), ('password', 'Password'), ('checkbox', 'Checkbox'), ('multi_checkbox', 'Multi checkbox'), ('radio', 'Radio'), ('hidden', 'Hidden'), ('captcha', 'Captcha'), ('upload_file', 'Upload file')], max_length=80, verbose_name='Genre')),
                ('is_required', models.BooleanField(default=True, verbose_name='Is Required')),
                ('placeholder', models.CharField(blank=True, max_length=100, null=True, verbose_name='Placeholder')),
                ('default', models.CharField(blank=True, max_length=255, null=True, verbose_name='Default Value')),
                ('help_text', models.CharField(blank=True, max_length=200, null=True, verbose_name='Help Text')),
                ('regex_pattern', models.CharField(blank=True, max_length=500, null=True, verbose_name='Regex Pattern')),
                ('error_message', models.CharField(blank=True, max_length=200, null=True, verbose_name='Error Message')),
                ('weight', models.PositiveIntegerField(verbose_name='Weight')),
                ('is_active', models.BooleanField(verbose_name='Is Active')),
                ('file_types', models.CharField(max_length=100, verbose_name='Allow File Types')),
                ('file_size', models.IntegerField(verbose_name='File Size')),
                ('object_id', models.BigIntegerField(verbose_name='Depends on Object ID')),
            ],
            options={
                'verbose_name': 'Field',
                'verbose_name_plural': 'Fields',
                'ordering': ('weight',),
            },
        ),
        migrations.CreateModel(
            name='FieldCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('weight', models.PositiveIntegerField(verbose_name='Weight')),
            ],
            options={
                'verbose_name': 'FieldCategory',
                'verbose_name_plural': 'FieldCategories',
                'ordering': ('weight',),
            },
        ),
        migrations.CreateModel(
            name='FieldValueThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('slug', models.SlugField(allow_unicode=True, unique=True, verbose_name='Slug')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('publish', 'Publish'), ('suspend', 'Suspend')], default='draft', max_length=50, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Form',
                'verbose_name_plural': 'Forms',
            },
        ),
        migrations.CreateModel(
            name='FormAPIManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('url', models.URLField(verbose_name='URL')),
                ('headers', models.JSONField(blank=True, null=True, verbose_name='Headers')),
                ('method', models.CharField(choices=[('get', 'GET'), ('post', 'POST'), ('put', 'PUT'), ('patch', 'PATCH'), ('delete', 'DELETE'), ('option', 'OPTION')], max_length=50, verbose_name='Method')),
                ('body', models.TextField(blank=True, null=True, verbose_name='Body')),
                ('execute_time', models.CharField(choices=[('pre_load', 'Pre load'), ('post_load', 'Post load')], max_length=50, verbose_name='Execute Time')),
                ('response', models.TextField(blank=True, null=True, verbose_name='Response')),
                ('is_active', models.BooleanField(verbose_name='Is Active')),
                ('weight', models.PositiveIntegerField(verbose_name='Weight')),
            ],
            options={
                'verbose_name': 'FormAPIManager',
                'verbose_name_plural': 'FormAPIManagers',
                'ordering': ('weight',),
            },
        ),
        migrations.CreateModel(
            name='FormAPIThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FormDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('submit_text', models.CharField(default='Submit', max_length=100, verbose_name='Submit Text')),
                ('redirect_url', models.URLField(blank=True, null=True, verbose_name='Redirect URL')),
                ('success_message', models.CharField(max_length=255, verbose_name='Success Message')),
                ('send_mail', models.BooleanField(default=False, verbose_name='Send E-mail')),
                ('mail_seubject', models.CharField(blank=True, max_length=200, null=True, verbose_name='Mail Subject')),
                ('mail_to', models.CharField(blank=True, max_length=500, null=True, verbose_name='Mail To')),
                ('mail_bcc', models.CharField(blank=True, max_length=500, null=True, verbose_name='Mail BCC')),
                ('mail_message', models.TextField(help_text='You can use form fields name in this box eg: {{field_name}} or {{form_data}} to send all user data', verbose_name='Mail Message')),
                ('limit_to', models.PositiveIntegerField(verbose_name='Limit Submiting Form')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid From')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid To')),
            ],
            options={
                'verbose_name': 'Form Detail',
                'verbose_name_plural': 'Form Details',
            },
        ),
        migrations.CreateModel(
            name='FormFieldThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FormResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('data', models.JSONField(verbose_name='Data')),
                ('api_response', models.JSONField(blank=True, null=True, verbose_name='Api Respons')),
                ('user_ip', models.GenericIPAddressField(verbose_name='IP Address')),
            ],
            options={
                'verbose_name': 'Form Response',
                'verbose_name_plural': 'Form Responses',
            },
        ),
        migrations.CreateModel(
            name='FormTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('directory', models.CharField(max_length=500, verbose_name='Directory')),
            ],
            options={
                'verbose_name': 'FormTemplate',
                'verbose_name_plural': 'FormTemplates',
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('weight', models.PositiveIntegerField(verbose_name='Weight')),
            ],
            options={
                'verbose_name': 'Field',
                'verbose_name_plural': 'Fields',
                'ordering': ('weight',),
            },
        ),
        migrations.AddIndex(
            model_name='value',
            index=models.Index(fields=['name'], name='core.value_name'),
        ),
        migrations.AddIndex(
            model_name='value',
            index=models.Index(fields=['weight'], name='core.value_weight'),
        ),
        migrations.AddField(
            model_name='formresponse',
            name='form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='responses', to='core.form', verbose_name='Form'),
        ),
        migrations.AddField(
            model_name='formfieldthrough',
            name='field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_field_through', to='core.field', verbose_name='Field'),
        ),
        migrations.AddField(
            model_name='formfieldthrough',
            name='form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_field_through', to='core.form', verbose_name='Form'),
        ),
        migrations.AddField(
            model_name='formdetail',
            name='form',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.form', verbose_name='Form'),
        ),
        migrations.AddField(
            model_name='formapithrough',
            name='api',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_apis', to='core.formapimanager', verbose_name='API'),
        ),
        migrations.AddField(
            model_name='formapithrough',
            name='form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_apis', to='core.form', verbose_name='Form'),
        ),
        migrations.AddIndex(
            model_name='formapimanager',
            index=models.Index(fields=['title'], name='core.formapimanager_title'),
        ),
        migrations.AddIndex(
            model_name='formapimanager',
            index=models.Index(fields=['method'], name='core.formapimanager_method'),
        ),
        migrations.AddIndex(
            model_name='formapimanager',
            index=models.Index(fields=['is_active'], name='core.formapimanager_active'),
        ),
        migrations.AddIndex(
            model_name='formapimanager',
            index=models.Index(fields=['weight'], name='core.formapimanager_weight'),
        ),
        migrations.AddField(
            model_name='form',
            name='apis',
            field=models.ManyToManyField(related_name='forms', through='core.FormAPIThrough', to='core.formapimanager', verbose_name='Apis'),
        ),
        migrations.AddField(
            model_name='form',
            name='fields',
            field=models.ManyToManyField(related_name='forms', through='core.FormFieldThrough', to='core.field', verbose_name='Fields'),
        ),
        migrations.AddField(
            model_name='fieldvaluethrough',
            name='field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_values', to='core.field', verbose_name='Field'),
        ),
        migrations.AddField(
            model_name='fieldvaluethrough',
            name='form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_values', to='core.value', verbose_name='Value'),
        ),
        migrations.AddField(
            model_name='fieldcategory',
            name='parent',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_active': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.fieldcategory', verbose_name='Parent Category'),
        ),
        migrations.AddField(
            model_name='field',
            name='category',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_active': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.fieldcategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='field',
            name='content_type',
            field=models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'core'), ('model', 'Field')), models.Q(('app_label', 'core'), ('model', 'Value')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='contenttypes.contenttype', verbose_name='Depends On Object'),
        ),
        migrations.AddField(
            model_name='field',
            name='values',
            field=models.ManyToManyField(help_text='Only for multi value fields like Dropdown, Radio, Checkbox, etc...', related_name='fields', through='core.FieldValueThrough', to='core.value', verbose_name='Values'),
        ),
        migrations.AddIndex(
            model_name='formresponse',
            index=models.Index(fields=['user_ip'], name='core.formresponse_user'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['title'], name='core.form_title'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['slug'], name='core.form_slug'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['status'], name='core.form_status'),
        ),
        migrations.AddIndex(
            model_name='fieldcategory',
            index=models.Index(fields=['title'], name='core.fieldcategory_title'),
        ),
        migrations.AddIndex(
            model_name='fieldcategory',
            index=models.Index(fields=['is_active'], name='core.fieldcategory_active'),
        ),
        migrations.AddIndex(
            model_name='fieldcategory',
            index=models.Index(fields=['weight'], name='core.fieldcategory_weight'),
        ),
        migrations.AddIndex(
            model_name='field',
            index=models.Index(fields=['label'], name='core.field_label'),
        ),
        migrations.AddIndex(
            model_name='field',
            index=models.Index(fields=['name'], name='core.field_name'),
        ),
        migrations.AddIndex(
            model_name='field',
            index=models.Index(fields=['genre'], name='core.field_genre'),
        ),
        migrations.AddIndex(
            model_name='field',
            index=models.Index(fields=['weight'], name='core.field_weight'),
        ),
    ]
